{"version":3,"sources":["Styled/Settings/constants.js","containers/Spotlight/Header/index.js","utils/history.js","containers/Spotlight/Content/Page1/index.js","containers/Spotlight/Content/Page2/index.js","containers/Spotlight/Content/Routes.js","containers/Spotlight/Content/index.js","containers/Spotlight/Navigation/index.js","utils/event.js","containers/Spotlight/Styled.js","containers/Spotlight/index.js","App.js","serviceWorker.js","containers/Spotlight/reducer.js","containers/Spotlight/constants.js","containers/Spotlight/epics.js","store/epics.js","store/index.js","store/configureStore.js","store/reducers.js","index.js"],"names":["mixinWidthWrapper","concat","HeaderContainer","styled","div","_templateObject","Header","react_default","a","createElement","history","createBrowserHistory","basename","process","Page1","Page2","routePathConfig","Routes","react_router","exact","path","component","ContentContainer","Content_templateObject","Content","NavigationContainer","Navigation_templateObject","Navigation","handleRedirect","event","pagePath","attr","end","currentTarget","temp","target","dataId","getAttribute","parentElement","findAttributeInEvent","push","data-page","onClick","SpotlightContainer","Styled_templateObject","Spotlight","className","Spotlight_Header","Spotlight_Content","Spotlight_Navigation","App","containers_Spotlight","Component","Boolean","window","location","hostname","match","initialState","fromJS","spotLightReducer","state","arguments","length","undefined","type","INIT","epics","action$","store","ofType","switchMap","Observable","empty","store_epics","Object","toConsumableArray","spotLightEpics","epic$","BehaviorSubject","combineEpics","apply","initialEpics","epicMiddleware","createEpicMiddleware","middlewares","enhancers","applyMiddleware","composeEnhancers","compose","createStore","combineReducers","spotlight","spotlightReducer","run","deps","mergeMap","epic","catch","err","source$","setTimeout","configureStore","ReactDOM","render","es","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2d4871c.chunk.js","sourcesContent":["export const MAX_WIDTH = 1024;\nexport const HEIGHT_HEADER = 50;\nexport const HEIGHT_NAVIGATION = 50;\n\nexport const mixinWidthWrapper = ()=> `\n  width: 100%;\n  max-width: ${MAX_WIDTH}px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  mixinWidthWrapper,\n} from 'Styled/Settings/constants';\n\nconst HeaderContainer = styled.div`\n  background: yellow;\n  ${mixinWidthWrapper()}\n`;\n\nconst Header = () => (\n  <HeaderContainer>\n    Header\n  </HeaderContainer>\n);\n\nexport default Header;\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory(\n  { basename: process.env.PUBLIC_URL }\n);\n\nexport default history;\n","import React from 'react';\n\nconst Page1 = () => (\n  <div>Page1</div>\n);\n\nexport default Page1;\n","import React from 'react';\n\nconst Page2 = () => (\n  <div>Page2</div>\n);\n\nexport default Page2;\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport history from 'utils/history';\nimport Page1 from 'containers/Spotlight/Content/Page1';\nimport Page2 from 'containers/Spotlight/Content/Page2';\n\nexport const routePathConfig = {\n  page1Path: '/1',\n  page2Path: '/2',\n};\n\nexport default () => (\n  <Router history={history}>\n    <Switch>\n      <Route exact path={routePathConfig.page1Path} component={Page1} />\n      <Route exact path={routePathConfig.page2Path} component={Page2} />\n    </Switch>\n  </Router>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  mixinWidthWrapper,\n} from 'Styled/Settings/constants';\nimport Routes from './Routes';\n\nconst ContentContainer = styled.div`\n  background: yellow;\n  ${mixinWidthWrapper()}\n`;\n\nconst Content = () => (\n  <ContentContainer>\n    <Routes />\n  </ContentContainer>\n);\n\nexport default Content;\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  mixinWidthWrapper,\n} from 'Styled/Settings/constants';\nimport {\n  findAttributeInEvent,\n} from 'utils/event';\nimport history from 'utils/history';\n\nconst NavigationContainer = styled.div`\n  background: yellow;\n  ${mixinWidthWrapper()}\n`;\n\nconst Navigation = () => {\n  const handleRedirect = (event) => {\n    const pagePath = findAttributeInEvent(event, 'data-page');\n    history.push(pagePath);\n  }\n  return (\n    <NavigationContainer>\n      <button data-page={'1'} onClick={handleRedirect}>Page1</button>\n      <button data-page={'2'} onClick={handleRedirect}>Page2</button>\n    </NavigationContainer>\n  );\n};\n\nexport default Navigation;\n","export const findAttributeInEvent = (event, attr) => {\n  const end = event.currentTarget;\n\n  let temp = event.target;\n  let dataId = temp.getAttribute(attr);\n\n  while (temp !== end && !dataId) {\n      temp = temp.parentElement;\n      if (temp === null) {\n          break;\n      }\n      dataId = temp.getAttribute(attr);\n  }\n  return dataId;\n};\n","import styled from 'styled-components';\nimport {\n  HEIGHT_HEADER,\n  HEIGHT_NAVIGATION,\n} from 'Styled/Settings/constants';\n\nexport const SpotlightContainer = styled.div`\n  display: grid;\n  grid-template-rows: ${HEIGHT_HEADER}px auto ${HEIGHT_NAVIGATION}px;\n  grid-template-areas:\n    \"header\"\n    \"content\"\n    \"navigation\";\n\n  height: 100vh;\n  .spot-light__header-container {\n    grid-area: header;\n    border: 1px solid grey;\n    display: flex;\n    justify-content: center;\n  }\n  .spot-light__content-container {\n    grid-area: content;\n    border: 1px solid grey;\n    display: flex;\n    justify-content: center;\n  }\n  .spot-light__navigation-container {\n    grid-area: navigation;\n    border: 1px solid grey;\n    display: flex;\n    justify-content: center;\n  }\n`;\n","import React from 'react';\nimport Header from './Header';\nimport Content from './Content';\nimport Navigation from './Navigation';\nimport {\n  SpotlightContainer,\n} from './Styled';\n\nconst Spotlight = () => (\n  <SpotlightContainer>\n    <div className=\"spot-light__header-container\">\n      <Header />\n    </div>\n    <div className=\"spot-light__content-container\">\n      <Content />\n    </div>\n    <div className=\"spot-light__navigation-container\">\n      <Navigation />\n    </div>\n  </SpotlightContainer>\n);\n\nexport default Spotlight;\n","import React, { Component } from 'react';\nimport Spotlight from 'containers/Spotlight/';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Spotlight />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { fromJS } from 'immutable';\nconst initialState = fromJS({\n\n});\n\nfunction spotLightReducer(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\nexport default spotLightReducer;\n","export const KEY_REDUCER = 'SPOT_LIGHT';\nexport const INIT = `${KEY_REDUCER}/INIT`;\n","import { Observable } from 'rxjs/Rx';\nimport {\n    INIT,\n} from './constants';\n\nconst setInit = (action$, store) =>\n    action$.ofType(INIT).switchMap(() => {\n        return Observable.empty();\n    });\n\nexport default [\n    setInit,\n];\n","import spotLightEpics from 'containers/Spotlight/epics';\n\nexport default [...spotLightEpics];\n","import configureStore from './configureStore';\n\nconst store = configureStore();\n\nexport default store;\n","import { fromJS } from 'immutable';\nimport {\n    createStore,\n    applyMiddleware,\n    compose\n} from 'redux';\nimport createReducer from 'store/reducers';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { createEpicMiddleware, combineEpics } from 'redux-observable';\nimport initialEpics from './epics';\n\nexport default function configureStore(initialState = {}, history) {\n    // Create root epic that accepts async injection\n    const epic$ = new BehaviorSubject(combineEpics(...initialEpics));\n    const rootEpic = (action$, store, deps) =>\n        epic$.mergeMap(epic =>\n            epic(action$, store, deps).catch((err, source$) => {\n                setTimeout(() => {\n                    throw err;\n                }, 0);\n                return source$;\n            }),\n        );\n    const epicMiddleware = createEpicMiddleware();\n\n    // Create the store with two middlewares\n    // 1. sagaMiddleware: Makes redux-sagas work\n    // 2. routerMiddleware: Syncs the location/URL path to the state\n    const middlewares = [\n        epicMiddleware,\n    ];\n\n    const enhancers = [applyMiddleware(...middlewares)];\n\n    // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n    /* eslint-disable no-underscore-dangle */\n    const composeEnhancers =\n        process.env.NODE_ENV !== 'production' &&\n            typeof window === 'object' &&\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n                // TODO Try to remove when `react-router-redux` is out of beta, LOCATION_CHANGE should not be fired more than once after hot reloading\n                // Prevent recomputing reducers for `replaceReducer`\n                shouldHotReload: false,\n            })\n            : compose;\n\n    const store = createStore(\n        createReducer(),\n        fromJS(initialState),\n        composeEnhancers(...enhancers)\n    );\n\n    epicMiddleware.run(rootEpic);\n\n    return store;\n}\n","import { combineReducers } from 'redux-immutable';\nimport spotlightReducer from 'containers/Spotlight/reducer';\n\n/**\n * Creates the main reducer with the asynchronously loaded ones\n */\nexport default function createReducer(injectedReducers) {\n    return combineReducers({\n        spotlight: spotlightReducer,\n    });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from 'store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}